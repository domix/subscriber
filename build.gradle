apply plugin: 'groovy'
apply plugin: 'fatjar'
apply plugin: 'application'
apply plugin: 'project-report'
apply plugin: 'idea'
apply plugin: 'jacoco'

// The main class of the application
mainClassName = 'com.practicecamp.services.subscriber.SubscriberService'

// Use Java 7 by default
sourceCompatibility = 1.7
targetCompatibility = 1.7

// Add Gradle FatJar Plugin, see https://github.com/musketyr/gradle-fatjar-plugin
buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    //classpath group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.1.3'
    classpath group: 'eu.appsatori', name: 'gradle-fatjar-plugin', version: '0.2-rc1'
  }
}

// Set our project variables
project.ext {
  dropwizardVersion = '0.7.0-SNAPSHOT'
  dropWizardConfig = "./src/dist/config/example.yml"
}

repositories {
  mavenCentral()
  maven {
    url 'http://oss.sonatype.org/content/repositories/snapshots'
  }
  maven {
    url 'http://repo.sindica.to/nexus/content/repositories/public-milestones/'
  }
}

dependencies {
  def dropWizardModules = [
    'db',
    'jdbi',
    'migrations'
  ]
  compile 'sindica.to:dropwizard-spring:0.3.0-SNAPSHOT'

  dropWizardModules.each {
    compile "io.dropwizard:dropwizard-${it}:${dropwizardVersion}"
  }

  // this dependency is needed due to http://issues.gradle.org/browse/GRADLE-2647
  compile "com.sun.jersey:jersey-client:1.15"
  compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.2.1'
  testCompile group: 'junit', name: 'junit', version: '4.11'
  testCompile group: 'org.mockito', name: 'mockito-all', version: '1.9.5'
  //testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'

  runtime 'postgresql:postgresql:9.1-901-1.jdbc4'
}

// Configure the fatJar task
fatJar {
  classifier 'fat'

  // We need to add the main class to the manifest, otherwise the JAR won't start.
  manifest {
    attributes 'Main-Class': mainClassName
  }

  // We have to exclude signature files from the fat JAR, otherwise we'll get invalid signature file digest errors.
  exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
}

// Configure the run task to start the Dropwizard service

run {
  args 'server', dropWizardConfig
}

task(dbstatus, dependsOn: 'classes', type: JavaExec) {
  main = mainClassName
  classpath = sourceSets.main.runtimeClasspath
  args 'db', 'status', dropWizardConfig
}

task(dbdump, dependsOn: 'classes', type: JavaExec) {
  main = mainClassName
  classpath = sourceSets.main.runtimeClasspath
  args 'db', 'dump', dropWizardConfig
}

task(dbtest, dependsOn: 'classes', type: JavaExec) {
  main = mainClassName
  classpath = sourceSets.main.runtimeClasspath
  args 'db', 'test', dropWizardConfig
}

task(dbtag, dependsOn: 'classes', type: JavaExec) {
  //ant.input(message: 'Tag name', addproperty: 'dbTagName')
  //main = mainClassName
  //classpath = sourceSets.main.runtimeClasspath
  //args 'db', 'tag', dropWizardConfig, ant.dbTagName
}

task(dbmigrate, dependsOn: 'classes', type: JavaExec) {
  main = mainClassName
  classpath = sourceSets.main.runtimeClasspath
  args 'db', 'migrate', dropWizardConfig
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.10'
}

task makeDirs(description: 'make all dirs for project setup') << {
  def sources = [sourceSets.main, sourceSets.test]
  sources*.allSource*.srcDirs.flatten().each { File srcDir ->
    println "making $srcDir"
    srcDir.mkdirs()
  }
}


jacocoTestReport {
  reports {
    html.enabled = true
    xml.enabled = true
    csv.enabled = true
  }
}
